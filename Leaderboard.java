/* Aurni, Bodhana, and Mary
 * Leaderboard Window
 * 6/5/23
 */
package reimagined;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class Leaderboard extends javax.swing.JFrame {

    //Declare connecting window
    MainWindow mW;

    public Leaderboard(MainWindow m) {
        initComponents();
        //Connect to main menu
        mW = m;
        //Set up window (color and size)
        Color lavendar = new Color(179, 179, 230);
        getContentPane().setBackground(lavendar);
        setSize(525, 725);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leaderboardJLabel = new javax.swing.JLabel();
        firstPlaceJLabel = new javax.swing.JLabel();
        secondPlaceJLabel = new javax.swing.JLabel();
        thirdPlaceJLabel = new javax.swing.JLabel();
        firstUserJLabel = new javax.swing.JLabel();
        secondUserJLabel = new javax.swing.JLabel();
        thirdUserJLabel = new javax.swing.JLabel();
        firstPointsJLabel = new javax.swing.JLabel();
        secondPointsJLabel = new javax.swing.JLabel();
        thirdPointsJLabel = new javax.swing.JLabel();
        sortBySweepsJButton = new javax.swing.JToggleButton();
        sortByEXPJButton = new javax.swing.JToggleButton();
        mainMenuJButon = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        leaderboardJLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        leaderboardJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        leaderboardJLabel.setText("Leaderboard");

        firstPlaceJLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        firstPlaceJLabel.setText("1");

        secondPlaceJLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        secondPlaceJLabel.setText("2");

        thirdPlaceJLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        thirdPlaceJLabel.setText("3");

        firstUserJLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        firstUserJLabel.setText("Username");

        secondUserJLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        secondUserJLabel.setText("Username");

        thirdUserJLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        thirdUserJLabel.setText("Username");

        firstPointsJLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        firstPointsJLabel.setText("0");

        secondPointsJLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        secondPointsJLabel.setText("0");

        thirdPointsJLabel.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        thirdPointsJLabel.setText("0");

        sortBySweepsJButton.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        sortBySweepsJButton.setText("Sort by Sweeps");
        sortBySweepsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBySweepsJButtonActionPerformed(evt);
            }
        });

        sortByEXPJButton.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        sortByEXPJButton.setText("Sort by EXP");
        sortByEXPJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByEXPJButtonActionPerformed(evt);
            }
        });

        mainMenuJButon.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        mainMenuJButon.setText("Main Menu");
        mainMenuJButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuJButonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstPlaceJLabel)
                    .addComponent(secondPlaceJLabel)
                    .addComponent(thirdPlaceJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(firstUserJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(secondUserJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(thirdUserJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(firstPointsJLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondPointsJLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(thirdPointsJLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
            .addComponent(sortByEXPJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sortBySweepsJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(leaderboardJLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainMenuJButon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(leaderboardJLabel)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstPlaceJLabel)
                    .addComponent(firstUserJLabel)
                    .addComponent(firstPointsJLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(secondPlaceJLabel)
                    .addComponent(secondUserJLabel)
                    .addComponent(secondPointsJLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thirdPlaceJLabel)
                    .addComponent(thirdUserJLabel)
                    .addComponent(thirdPointsJLabel))
                .addGap(31, 31, 31)
                .addComponent(sortByEXPJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sortBySweepsJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mainMenuJButon, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Quick sort algorithm in descending order
     *
     * @param users ArrayList of Users to be sorted
     * @param start Start index (often 0)
     * @param end Last index (often length of array - 1)
     */
    public void quickSortDescendEXP(ArrayList<User> users, int start, int end) {
        //Check if there are less than two elements to sort (indicates that array is already sorted)
        if (start >= end) {
            return; //Return nothing
        } else {
            //Select pivot (the middle element)
            int pivot = (users.get(((users.size() - 1) / 2))).getHighScoreExPoints();
            int i = start; //Starting index for the left subarray
            int j = end; //Starting index for the right subarray
            //Partition the array around the pivot element
            //Loop will move elements to the correct side of the pivot (left or right)
            while (i < j) {
                //Move index to the right until we find an element that is greater than the pivot
                while ((users.get(i)).getHighScoreExPoints() > pivot) {
                    i++;
                }
                //Move index to the left until we find an element that is less than the pivot
                while ((users.get(j)).getHighScoreExPoints() < pivot) {
                    j--;
                }
                //Swap the elements found by the two loops so that they are in subarray they belong in (left or right)
                if (i <= j) {
                    User temp = users.get(i);
                    users.set(i, users.get(j));
                    users.set(j, temp);
                    i++; //Move one index to the right
                    j--; //Move other index to the left
                }
            }
            if (j == end) {
                return;
            }
            //Recursively sort the two subarrays
            quickSortDescendEXP(users, start, j);
            quickSortDescendEXP(users, i, end);
        }
        try {
            FileWriter expUsers = new FileWriter("src/reimagined/EXPLeaderboard.txt"); //Open connection to file
            String usersList = ""; //Initialize empty String to store all user information
            for (int i = 0; i < users.size(); i++) { //Loop through ArrayList of users
                //Retrieve info of all users from ArrayList and append to String
                usersList = usersList + (users.get(i)).getUsername()
                        + "\n" + (users.get(i)).getPassword()
                        + "\n" + (users.get(i)).getHighScoreExPoints()
                        + "\n" + (users.get(i)).getHighScoreNumOfSweeps()
                        + "\n" + ((users.get(i)).getAchievements())[0]
                        + "\n" + ((users.get(i)).getAchievements())[1]
                        + "\n" + ((users.get(i)).getAchievements())[2]
                        + "\n" + ((users.get(i)).getAchievements())[3]
                        + "\n" + ((users.get(i)).getAchievements())[4]
                        + "\n" + ((users.get(i)).getAchievements())[5]
                        + "\n" + ((users.get(i)).getAchievements())[6]
                        + "\n" + ((users.get(i)).getAchievements())[7]
                        + "\n";
            }
            expUsers.write(usersList); //Write compiled list of user info to file
            expUsers.close();
        } catch (IOException e) {
            System.out.println("Error: " + e);
        }
    }

    /**
     * Binary search for User with specified place in ArrayList of users
     *
     * @param users ArrayList of Users
     * @param left left half of ArrayList
     * @param right right half of ArrayList
     */
    public void binarySearchEXP(ArrayList<User> users, int left, int right, int x) {
        if (left > right) {
            return; //Return nothing
        }
        int middle = (left + right) / 2; //Determine middle of ArrayList
        //Check if middle User is in first place
        if (users.indexOf(users.get(middle)) == 0) {
            firstUserJLabel.setText((users.get(middle)).getUsername());
            firstPointsJLabel.setText("" + (users.get(middle)).getHighScoreExPoints());
            //Check if middle User is in second place
        } else if (users.indexOf(users.get(middle)) == 1) {
            secondUserJLabel.setText((users.get(middle)).getUsername());
            secondPointsJLabel.setText("" + (users.get(middle)).getHighScoreExPoints());
            //Check if middle User is in third place
        } else if (users.indexOf(users.get(middle)) == 2) {
            thirdUserJLabel.setText((users.get(middle)).getUsername());
            thirdPointsJLabel.setText("" + (users.get(middle)).getHighScoreExPoints());
        }
        //Search both halves of ArrayList that include User with one of top 3 places
        if (users.indexOf(users.get(middle)) > x) {
            binarySearchEXP(users, left, middle - 1, x);
        } else {
            binarySearchEXP(users, middle + 1, right, x);
        }
    }

    /**
     * Quick sort algorithm in descending order
     *
     * @param users ArrayList of Users to be sorted
     * @param start Start index (often 0)
     * @param end Last index (often length of array - 1)
     */
    public void quickSortDescendSweeps(ArrayList<User> users, int start, int end) {
        //Check if there are less than two elements to sort (indicates that array is already sorted)
        if (start >= end) {
            return; //Return nothing

        } else {
            //Select pivot (the middle element)
            int pivot = (users.get(((users.size() - 1) / 2))).getHighScoreNumOfSweeps();
            int i = start; //Starting index for the left subarray
            int j = end; //Starting index for the right subarray
            //Partition the array around the pivot element
            //Loop will move elements to the correct side of the pivot (left or right)
            while (i < j) {
                //Move index to the right until we find an element that is greater than the pivot
                //Write a for loop to get tghe 
                while ((users.get(i)).getHighScoreNumOfSweeps() > pivot) {
                    i++;
                }
                //Move index to the left until we find an element that is less than the pivot
                while ((users.get(j)).getHighScoreNumOfSweeps() < pivot) {
                    j--;
                }
                //Swap the elements found by the two loops so that they are in subarray they belong in (left or right)
                if (i <= j) {
                    User temp = users.get(i);
                    users.set(i, users.get(j));
                    users.set(j, temp);
                    i++; //Move one index to the right
                    j--; //Move other index to the left
                }
            }
            if (j == end) {
                return;
            }
            //Eecursively sort the two subarrays
            quickSortDescendSweeps(users, start, j);
            quickSortDescendSweeps(users, i, end);
        }
        try {
            FileWriter sweepsUsers = new FileWriter("src/reimagined/SweepsLeaderboard.txt"); //Open connection to file
            String usersList = ""; //Initialize empty String to store user information
            for (int i = 0; i < users.size(); i++) { //Loop through ArrayList of users
                //Retrieve info of all users from ArrayList and append to String
                usersList = usersList + (users.get(i)).getUsername() + "\n"
                        + (users.get(i)).getPassword() + "\n"
                        + (users.get(i)).getHighScoreExPoints() + "\n"
                        + (users.get(i)).getHighScoreNumOfSweeps() + "\n"
                        + ((users.get(i)).getAchievements())[0]
                        + "\n" + ((users.get(i)).getAchievements())[1]
                        + "\n" + ((users.get(i)).getAchievements())[2]
                        + "\n" + ((users.get(i)).getAchievements())[3]
                        + "\n" + ((users.get(i)).getAchievements())[4]
                        + "\n" + ((users.get(i)).getAchievements())[5]
                        + "\n" + ((users.get(i)).getAchievements())[6]
                        + "\n" + ((users.get(i)).getAchievements())[7]
                        + "\n";
            }
            sweepsUsers.write(usersList); //Write compiled list of user info to file
            sweepsUsers.close();
        } catch (IOException e) {
            System.out.println("Error: " + e);
        }
    }

    /**
     * Binary search for User with specified place in ArrayList of users
     *
     * @param users - ArrayList of Users
     * @param left - left half of ArrayList
     * @param right - right half of ArrayList
     */
    public void binarySearchSweeps(ArrayList<User> users, int left, int right, int x) {
        if (left > right) {
            return; //Return nothing
        }
        int middle = (left + right) / 2; //Determine middle of ArrayList
        //Check if middle User is in first place
        if (users.indexOf(users.get(middle)) == 0) {
            //Update Leaderboard if so
            firstUserJLabel.setText((users.get(middle)).getUsername());
            firstPointsJLabel.setText("" + (users.get(middle)).getHighScoreNumOfSweeps());
            //Check if middle User is in second place
        } else if (users.indexOf(users.get(middle)) == 1) {
            secondUserJLabel.setText((users.get(middle)).getUsername());
            secondPointsJLabel.setText("" + (users.get(middle)).getHighScoreNumOfSweeps());
            //Check if middle User is in third place
        } else if (users.indexOf(users.get(middle)) == 2) {
            thirdUserJLabel.setText((users.get(middle)).getUsername());
            thirdPointsJLabel.setText("" + (users.get(middle)).getHighScoreNumOfSweeps());
        }
        //Search both halves of ArrayList that include User with one of top 3 places
        if (users.indexOf(users.get(middle)) > x) {
            binarySearchSweeps(users, left, middle - 1, x);
        } else {
            binarySearchSweeps(users, middle + 1, right, x);
        }
    }

    private void sortByEXPJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByEXPJButtonActionPerformed
        ArrayList<User> users = new ArrayList(); //Instantiate ArrayList
        try {
            File allUsers = new File("src/reimagined/UsersDatabase.txt");
            Scanner s = new Scanner(allUsers);
            while (s.hasNextLine()) { //Loop while File has next line
                String username = s.nextLine(); //USERNAME
                String password = s.nextLine(); //PASSWORD
                int exPoints = Integer.parseInt(s.nextLine()); //HIGHEST NUMBER OF EXPERIENCE POINTS
                int numOfSweeps = Integer.parseInt(s.nextLine()); //HIGHEST NUMBER OF SWEEPS
                boolean[] achievements = new boolean[8]; //ACHIEVEMENTS (Loop through since array of booleans)
                for (int i = 0; i < achievements.length; i++) {
                    achievements[i] = Boolean.parseBoolean(s.nextLine());
                }
                User newUser = new User(username, password, exPoints, numOfSweeps, achievements); //Create new user
                users.add(newUser); //Add new user to ArrayList
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error: " + e);
        }

        int start = 0; //Initialize starting index
        int end = users.size() - 1; //Initialize ending index
        int left = start; //Left is the same as start
        int right = end; //Right is the same as end

        quickSortDescendEXP(users, start, end); //Sort users in decending order by EXP
        binarySearchEXP(users, left, right, 0); //Search for user with highest EXP
        binarySearchEXP(users, left, right, 1); //Search for user with second highest EXP
        binarySearchEXP(users, left, right, 2); //Search for user with third highest EXP
        sortByEXPJButton.setSelected(false); //Stops it from changing colour between clicks
    }//GEN-LAST:event_sortByEXPJButtonActionPerformed

    private void sortBySweepsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBySweepsJButtonActionPerformed
        ArrayList<User> users = new ArrayList(); //Instantiate ArrayList
        try {
            File allUsers = new File("src/reimagined/UsersDatabase.txt");
            Scanner s = new Scanner(allUsers);
            while (s.hasNextLine()) { //Loop while File has next line
                String username = s.nextLine(); //USERNAME
                String password = s.nextLine(); //PASSWORD
                int exPoints = Integer.parseInt(s.nextLine()); //HIGHEST NUMBER OF EXPERIENCE POINTS
                int numOfSweeps = Integer.parseInt(s.nextLine()); //HIGHEST NUMBER OF SWEEPS
                boolean[] achievements = new boolean[8]; //ACHIEVEMENTS (Loop through since array of booleans)
                for (int i = 0; i < 8; i++) {
                    achievements[i] = Boolean.parseBoolean(s.nextLine());
                }
                User newUser = new User(username, password, exPoints, numOfSweeps, achievements); //Create new user
                users.add(newUser); //Add new user to ArrayList
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error: " + e);
        }
        int start = 0; //Initialize starting index
        int end = users.size() - 1; //Initialize ending index
        int left = start; //Left is the same as start
        int right = end; //Right is the same as end

        quickSortDescendSweeps(users, start, end); //Sort users in decending order by number of sweeps
        binarySearchSweeps(users, left, right, 0); //Search for user with highest number of sweeps
        binarySearchSweeps(users, left, right, 1); //Search for user with second highest number of sweeps
        binarySearchSweeps(users, left, right, 2); //Search for user with third highest number of sweeps
        sortBySweepsJButton.setSelected(false); //Stops it from changing colour between clicks
    }//GEN-LAST:event_sortBySweepsJButtonActionPerformed

    private void mainMenuJButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuJButonActionPerformed
        mW.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_mainMenuJButonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel firstPlaceJLabel;
    private javax.swing.JLabel firstPointsJLabel;
    private javax.swing.JLabel firstUserJLabel;
    private javax.swing.JLabel leaderboardJLabel;
    private javax.swing.JButton mainMenuJButon;
    private javax.swing.JLabel secondPlaceJLabel;
    private javax.swing.JLabel secondPointsJLabel;
    private javax.swing.JLabel secondUserJLabel;
    private javax.swing.JToggleButton sortByEXPJButton;
    private javax.swing.JToggleButton sortBySweepsJButton;
    private javax.swing.JLabel thirdPlaceJLabel;
    private javax.swing.JLabel thirdPointsJLabel;
    private javax.swing.JLabel thirdUserJLabel;
    // End of variables declaration//GEN-END:variables
}
