/* Aurni, Bodhana, Mary
 * 6/12/23
 * User Login Window
 */
package reimagined;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.JOptionPane;

public class UserLogin extends javax.swing.JFrame {

    //Declare connecting windows
    MainWindow mW;
    DecisionWindow dW;

    public UserLogin(MainWindow m) {
        initComponents();
        //Connect to main menu
        mW = m;
        //Set up window (color and size)
        Color lavendar = new Color(179, 179, 230);
        getContentPane().setBackground(lavendar);
        setSize(525, 725);
        loadUserData(); //Load saved user data from file into ArrayList
    }

    /**
     * Loads user data from file
     */
    public void loadUserData() {
        int numOfLines = 0;
        try {
            File f = new File("src/reimagined/UsersDatabase.txt");
            Scanner s1 = new Scanner(f); //First scanner counts the number of lines
            while (s1.hasNextLine()) {
                s1.nextLine();
                numOfLines++;
            }
            int numOfUsers = numOfLines / 12; //Calculate the number of users stored in file
            Scanner s2 = new Scanner(f); //Second scanner assigns content to relevant variables
            for (int i = 0; i < numOfUsers; i++) { //Runs for each user and adds data to ArrayList
                String username = s2.nextLine(); //USERNAME
                String password = s2.nextLine(); //PASSWORD
                int exPoints = Integer.parseInt(s2.nextLine()); //EXPERIENCE POINTS
                int numOfSweeps = Integer.parseInt(s2.nextLine()); //NUMBER OF SWEEPS DURING MINIGAME
                boolean achievements[] = new boolean[8]; //Initializes an array of all 8 achievements user can win
                for (int x = 0; x < achievements.length; x++) { //Sets them to TRUE or FALSE based on previous attempts playing game
                    achievements[x] = Boolean.parseBoolean(s2.nextLine());
                }
                User newUser = new User(username, password, exPoints, numOfSweeps, achievements); //Creates a new user and adds them to ArrayList
                MainWindow.userData.add(newUser);
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error: " + e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        userNameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        usernameTxtField = new javax.swing.JTextField();
        passwordTxtField = new javax.swing.JTextField();
        backBtn = new javax.swing.JButton();
        signInBtn = new javax.swing.JButton();
        signUpBtn = new javax.swing.JButton();
        errorJLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Courier New", 0, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Login");

        userNameLabel.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        userNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userNameLabel.setText("Username:");

        passwordLabel.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        passwordLabel.setText("Password:");

        usernameTxtField.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N

        passwordTxtField.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N

        backBtn.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        backBtn.setText("Back to Menu");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        signInBtn.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        signInBtn.setText("Sign In");
        signInBtn.setToolTipText("");
        signInBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInBtnActionPerformed(evt);
            }
        });

        signUpBtn.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        signUpBtn.setText("Sign Up");
        signUpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUpBtnActionPerformed(evt);
            }
        });

        errorJLabel.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        errorJLabel.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(signUpBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(signInBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(userNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                            .addComponent(usernameTxtField)
                            .addComponent(errorJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLabel)
                    .addComponent(usernameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(errorJLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signUpBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(signInBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        mW.setVisible(true);
        this.setVisible(false);
        //Reset all login fields for next iteration
        usernameTxtField.setText("");
        passwordTxtField.setText("");
        errorJLabel.setText("");
    }//GEN-LAST:event_backBtnActionPerformed

    private void signUpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signUpBtnActionPerformed
        boolean usernameFound = false; //Assume username does not exist
        boolean achievements[] = new boolean[8]; //Load achievements array with false booleans for later assignment
        for (int i = 0; i < achievements.length; i++) {
            achievements[i] = false;
        }
        try {
            for (int i = 0; i < MainWindow.userData.size(); i++) { //Loop through ArrayList of users
                if ((MainWindow.userData.get(i)).getUsername().equals(usernameTxtField.getText())) { //Check if entered username matches with prev username
                    usernameFound = true; //Inputted username has been found
                }
            }
            if (usernameFound) { //If username exists, display error message
                errorJLabel.setText("Username already exists. Please try again.");
            } else if (usernameTxtField.getText().equals("")) { //If username is empty, display error message
                errorJLabel.setText("Must enter a valid username. Please try again.");
            } else { //If username does NOT exist
                FileWriter allUsers = new FileWriter("src/reimagined/UsersDatabase.txt"); //Open connection to database file
                //Create new user and update current user as such
                User newUser = new User(usernameTxtField.getText(), passwordTxtField.getText(), 0, 0, achievements);
                MainWindow.current = newUser;
                //Add user to ArrayList
                MainWindow.userData.add(newUser);
                String usersList = ""; //Initialize empty String to store user information
                //Retrieve info of all users from ArrayList and append to String
                for (int i = 0; i < MainWindow.userData.size(); i++) { //Loop through ArrayList of users
                    //Retrieve info of all users from ArrayList and append to String
                    usersList = usersList + (MainWindow.userData.get(i)).getUsername()
                            + "\n" + (MainWindow.userData.get(i)).getPassword()
                            + "\n" + (MainWindow.userData.get(i)).getHighScoreExPoints()
                            + "\n" + (MainWindow.userData.get(i)).getHighScoreNumOfSweeps()
                            + "\n" + ((MainWindow.userData.get(i)).getAchievements())[0]
                            + "\n" + ((MainWindow.userData.get(i)).getAchievements())[1]
                            + "\n" + ((MainWindow.userData.get(i)).getAchievements())[2]
                            + "\n" + ((MainWindow.userData.get(i)).getAchievements())[3]
                            + "\n" + ((MainWindow.userData.get(i)).getAchievements())[4]
                            + "\n" + ((MainWindow.userData.get(i)).getAchievements())[5]
                            + "\n" + ((MainWindow.userData.get(i)).getAchievements())[6]
                            + "\n" + ((MainWindow.userData.get(i)).getAchievements())[7]
                            + "\n";
                }
                allUsers.write(usersList); //Write compiled list of user info to file
                allUsers.close();
                //Open decision window and close user login page
                if (dW == null) {
                    dW = new DecisionWindow(mW); //Create new window if it doesn't exist
                }
                dW.setVisible(true);
                this.setVisible(false);
                //Reset all login fields for next iteration
                usernameTxtField.setText("");
                passwordTxtField.setText("");
                errorJLabel.setText("");
            }
        } catch (IOException e) {
            System.out.println("Error: " + e);
        }
    }//GEN-LAST:event_signUpBtnActionPerformed

    private void signInBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInBtnActionPerformed
        boolean usernameFound = false; //Assume username does not exist
        for (int i = 0; i < MainWindow.userData.size(); i++) { //Loop through ArrayList of users
            if ((MainWindow.userData.get(i)).getUsername().equals(usernameTxtField.getText())) { //Check if entered username matches with prev username
                usernameFound = true; //Inputted username has been found
            }
            if (usernameFound == true && (MainWindow.userData.get(i)).getPassword().equals(passwordTxtField.getText())) {
                MainWindow.current = MainWindow.userData.get(i); //Check if both entered username and password match
                //Open decision window and close user login page
                if (dW == null) {
                    dW = new DecisionWindow(mW); //Create new window if it doesn't exist
                }
                dW.setVisible(true);
                this.setVisible(false);
                //Reset all login fields for next iteration
                usernameTxtField.setText("");
                passwordTxtField.setText("");
                errorJLabel.setText("");
            } else { //If username and password do NOT match, display error message
                errorJLabel.setText("Password is incorrect. Please try again.");
            }
        }
        if (!usernameFound) { //If username does NOT exist, display error message
            errorJLabel.setText("Username does not exist. Please try again.");
        }
    }//GEN-LAST:event_signInBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel errorJLabel;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField passwordTxtField;
    private javax.swing.JButton signInBtn;
    private javax.swing.JButton signUpBtn;
    private javax.swing.JLabel title;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField usernameTxtField;
    // End of variables declaration//GEN-END:variables
}
